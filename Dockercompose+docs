Introduction to Docker Compose
=====================================
Containerizing a single service application is easy.

But when I had to containerize multiple services in separate containers, then we have to manager a lot.

My requirement was to containerize and host a MEAN stack application. 
=============================================================================

 A full stack application. Initially, I thought it was not possible. But after I heard about Docker Compose, I knew all my problems would be solved.

Docker Compose can be used to create separate containers (and host them) for each of the stacks in a MEAN stack application.

MEAN is the acronym for MongoDB Express Angular & NodeJs. The demo I will be showing in this blog is also on the same topic.

By using Docker Compose, we can host each of these technologies in separate containers on the same host and get them to communicate with each other. 
Each container will expose a port for communicating with other containers.

The communication and up-time of these containers will be maintained by Docker Compose.

So you may ask, how to setup this whole infrastructure? Well then, let me give you a more detailed explanation.

Dockerfile
Similar to how we spin any single-application container by writing a dockerfile, we will have to write a separate dockerfile for building each of the single-container applications.
Additionally, we will have to also write a Docker Compose File which will do the actual work. Docker Compose File will execute the different dockerfiles to create the different containers and let them interact with each other.

In our case, we have a full stack application which comprises of MongoDB, ExpressJS, Angular and NodeJS. MongoDB takes care of the back end database, 
NodeJS and ExpressJS are for server side rendering, and Angular is for front end.
