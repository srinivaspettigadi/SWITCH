DOCKER COMMANDS
===================
systemctl start docker
 systemctl status docker
 service docker.io status
 systemctl status docker
 docker images
 docker run hello-world
docker run --name myimage hello-world
 docker ps -a
 docker images
 history | grep docker
 docker pull tomcat
 docker images
 docker tag tomcat srinivas493/firstrepo:1
docker push srinivas493/firstrepo:1
 docker logout
 docker login
 docker push srinivas493/firstrepo:1
 docker run -itd tomcat  ====> iterative detached terminal
 docker ps
 docker ps -a
 docker run --name mytomcat -itd tomcat
docker stop mytomcat
docker start mytomcat

=======================================================================
root@ip-172-31-19-77:~# docker images
REPOSITORY              TAG       IMAGE ID       CREATED        SIZE
tomcat                  latest    c795915cb678   5 days ago     680MB
srinivas493/firstrepo   1         c795915cb678   5 days ago     680MB
srinivas493/firstrepo   2         c795915cb678   5 days ago     680MB
srinivas493/firstrepo   latest    c795915cb678   5 days ago     680MB
hello-world             latest    feb5d9fea6a5   8 months ago   13.3kB

TO BE NOTED
	Every Image must a unique tag , they cant be duplicated.
	All the images and components/objects will be stored in /var/lib/docker
	Run ===> will always create the new container. You run only for images not for containers
	Start ===> It will start only the container and only stopped container will be started.
Container Lifecycle 
	Created
	Running
	Paused
	Stopped
	Deleted







LIFECYCLE OF CONTAINERS
 

RUNNING CONTAINER CANNOT BE REMOVED
First stop and then remove
root@ip-172-31-19-77:~# docker rm mytomcat
Error response from daemon: You cannot remove a running container ae75bd22219788c3b5ace607844e9687659e400539bab458f1d23be3157f9057. Stop the container before attempting removal or force remove
Create Your Own Image
1.	Creating from the existing image
2.	Creating using docker file



Creating from existing Image
Docker ps
Docker commit containerid firstrepo:11  this will create a new image

root@ip-172-31-19-77:~# docker commit a50d259c9688 firstrepo:11
sha256:75a70854019763f29ed7447bbe4911db4a9c832543199c362d7a496923a5d5d4
root@ip-172-31-19-77:~# docker ps
CONTAINER ID   IMAGE                     COMMAND   CREATED          STATUS          PORTS     NAMES
90831e104f05   srinivas493/firstrepo:5   "bash"    5 minutes ago    Up 4 minutes              condescending_gauss
root@ip-172-31-19-77:~# docker images
REPOSITORY              TAG          IMAGE ID       CREATED          SIZE
firstrepo               11           75a708540197   7 seconds ago    77.8MB

Deleting Images
	docker images
	docker images -aq
	docker rmi -f $(docker images -aq)
	docker images






Creating Using DockerFile
FROM ubuntu
MAINTAINER "Srinivas"
RUN apt-get update
RUN apt-get install nginx -y
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

  docker build -t myimage:dockerfile .
  docker build -t myimage:dockerfile .
   docker run -it myimage:dockerfile
   docker history myimage:dockerfile
   docker run -itd myimage:dockerfile
   
===============================
Installing VIM package in docker container by taking ubuntu

FROM ubuntu
MAINTAINER "Srinivas"
RUN apt-get update
RUN apt-get install -y
CMD /bin/echo "Hello from container"

PORT FORWARDING
=================
dcoker run -itd nginx
docker inspect containerid
P ==> port forwarding
docker run -itd -P nginx
docker run -itd -p 9999:80 nginx
===================================================================
VOLUMES
=========
=========

docker volume ls
docker volume create vol1
docker volume inspect vol1 
docker run -itd --name containerwithvolume -v vol1:/mylogs ubuntu

docker run -itd --name containerwithvolume -v vol3:/mylogs ubuntu  ====> here if you dont have the volume vol3 it will be created.

Volumes are managed by the docker daemon  ==> this is more recommeneded

Bind mounts are also one of the volume types, it is just a file system on the server

REMOVE
========
docker volume rm vol1

====================================================================================================================================================


docker swarm init 
docker swarm join --token SWMTKN-1-1v3ui3oth5vgn3qz65vvsqvr2bj9syngymo0m7ho8mghx0sizn-c6967ffazyyk2w4u38jr2cas2 172.31.19.77:2377

docker node ls

docker service create --name myservice -p 8000:80 nginx


docker service create --name myservice -p 8000:80 nginx
docker service ls
docker ps
docker service ls

Scaling up the docker service 


docker service scale myservice=3
docker service ls


DRAINING a node
====================
docker node update --availability drain <IP> =======> take IP from docker node ls command


docker node update --availability active <IP>  ========> make active state

then check docker service ps myservice

=====================================================

docker swarm join-token manager
docker swarm join-token worker

docker service logs <servicename>
========================================

COMPOSE
============

The following only builds the images, does not start the containers:

docker-compose build
The following builds the images if the images do not exist and starts the containers:

docker-compose up
If you add the --build option, it is forced to build the images even when not needed:

docker-compose up --build
The following skips the image build process:

docker-compose up --no-build
========================================================================





